// src/types/paymentVoucherTypes.ts

export interface BasePaymentVoucher {
  CreatedID?: number;
  CreatedBy?: string;
  CreatedOn?: string;
  UpdatedID?: number;
  UpdatedBy?: string;
  UpdatedOn?: string;
  DeletedBy?: string;
  DeletedOn?: string;
  RecordStatus?: number;
}

export interface PaymentVoucher extends BasePaymentVoucher {
  PostingID?: number;
  VoucherNo: string;
  VoucherType?: string;
  TransactionDate: string | Date;
  PostingDate?: string | Date;
  CompanyID: number;
  FiscalYearID: number;
  CurrencyID: number;
  ExchangeRate?: number;
  Description?: string;
  Narration?: string;

  // Payment Specific Fields
  PaymentType: PaymentType;
  PaymentAccountID: number;
  SupplierID?: number;
  PaidTo?: string;
  RefNo?: string;
  ChequeNo?: string;
  ChequeDate?: string | Date;
  BankID?: number;
  TotalAmount: number;
  PaymentStatus?: PaymentStatus;

  // Approval workflow fields
  ApprovalStatus?: ApprovalStatus;
  RequiresApproval?: boolean;
  ApprovalComments?: string;
  ApprovedBy?: number;
  ApprovedOn?: string | Date;
  RejectedBy?: number;
  RejectedOn?: string | Date;
  RejectionReason?: string;

  // Reversal fields
  IsReversed?: boolean;
  ReversedBy?: number;
  ReversedOn?: string | Date;
  ReversalReason?: string;
  IsAutoGenerated?: boolean;

  // Cost Center Parameters
  CostCenter1ID?: number;
  CostCenter2ID?: number;
  CostCenter3ID?: number;
  CostCenter4ID?: number;
  CopyCostCenters?: boolean;

  // Tax Parameters
  TaxID?: number;
  IsTaxInclusive?: boolean;

  // Reference Information
  ReferenceType?: string;
  ReferenceID?: number;
  ReferenceNo?: string;

  // Additional fields from joins
  CompanyName?: string;
  FYDescription?: string;
  CurrencyName?: string;
  BankName?: string;
  PaymentAccountName?: string;
  SupplierName?: string;
  CostCenter1Name?: string;
  CostCenter2Name?: string;
  CostCenter3Name?: string;
  CostCenter4Name?: string;
  ApprovedByName?: string;
  RejectedByName?: string;

  // Calculated fields
  TotalDebits?: number;
  TotalCredits?: number;
}

export interface PaymentVoucherLine extends BasePaymentVoucher {
  PostingID?: number;
  VoucherNo?: string;
  AccountID: number;
  TransactionType: TransactionType;
  DebitAmount?: number;
  CreditAmount?: number;
  BaseAmount?: number;
  TaxID?: number;
  TaxPercentage?: number;
  LineTaxAmount?: number;
  LineDescription?: string;

  // Line-specific cost centers
  LineCostCenter1ID?: number;
  LineCostCenter2ID?: number;
  LineCostCenter3ID?: number;
  LineCostCenter4ID?: number;

  // Customer/Supplier assignment
  CustomerID?: number;
  LineSupplierID?: number; // Note: This is LineSupplierID in the stored procedure

  // Currency conversion
  BaseCurrencyAmount?: number;

  // Additional fields from joins
  AccountCode?: string;
  AccountName?: string;
  CustomerFullName?: string;
  SupplierName?: string;
  CostCenter1Name?: string;
  CostCenter2Name?: string;
  CostCenter3Name?: string;
  CostCenter4Name?: string;
}

export interface PaymentVoucherAttachment extends BasePaymentVoucher {
  PostingAttachmentID?: number;
  PostingID: number;
  DocTypeID: number;
  DocumentName: string;
  FilePath?: string;
  FileContent?: string | ArrayBuffer | null;
  FileContentType?: string;
  FileSize?: number;
  DocumentDescription?: string;
  UploadedDate?: string | Date;
  UploadedByUserID?: number;
  IsRequired?: boolean;
  DisplayOrder?: number;

  // Additional fields from joins
  DocTypeName?: string;
  UploadedByUserName?: string;

  // For UI only - not sent to backend
  file?: File;
  fileUrl?: string;
}

// Enums and supporting types
export enum PaymentType {
  CASH = "Cash",
  CHEQUE = "Cheque",
  BANK_TRANSFER = "Bank Transfer",
  ONLINE = "Online",
  WIRE_TRANSFER = "Wire Transfer",
  CREDIT_CARD = "Credit Card",
  DEBIT_CARD = "Debit Card",
}

export enum PaymentStatus {
  DRAFT = "Draft",
  PENDING = "Pending",
  PAID = "Paid",
  REJECTED = "Rejected",
  CANCELLED = "Cancelled",
  REVERSED = "Reversed",
}

export enum ApprovalStatus {
  PENDING = "Pending",
  APPROVED = "Approved",
  REJECTED = "Rejected",
}

export enum TransactionType {
  DEBIT = "Debit",
  CREDIT = "Credit",
}

export enum ApprovalAction {
  APPROVE = "Approve",
  REJECT = "Reject",
}

// Supporting types for dropdowns
export interface Account {
  AccountID: number;
  AccountCode: string;
  AccountName: string;
  AccountTypeID?: number;
  AccountTypeName?: string;
  IsActive?: boolean;
  IsPostable?: boolean;
  CurrencyID?: number;
  Balance?: number;
}

export interface Company {
  CompanyID: number;
  CompanyName: string;
  CompanyNo?: string;
  IsActive?: boolean;
}

export interface FiscalYear {
  FiscalYearID: number;
  FYCode: string;
  FYDescription: string;
  StartDate: string | Date;
  EndDate: string | Date;
  IsActive?: boolean;
  IsClosed?: boolean;
}

export interface Currency {
  CurrencyID: number;
  CurrencyCode: string;
  CurrencyName: string;
  ConversionRate?: number;
  IsDefault?: boolean;
}

export interface Bank {
  BankID: number;
  BankCode: string;
  BankName: string;
  SwiftCode?: string;
  CountryID?: number;
  IsActive?: boolean;
}

export interface CostCenter {
  CostCenter1ID?: number;
  CostCenter2ID?: number;
  CostCenter3ID?: number;
  CostCenter4ID?: number;
  Description: string;
}

export interface Customer {
  CustomerID: number;
  CustomerNo?: string;
  CustomerFullName: string;
  AccountID?: number;
}

export interface Supplier {
  SupplierID: number;
  SupplierNo?: string;
  SupplierName: string;
  AccountID?: number;
  OutstandingBalance?: number;
  PaymentTermID?: number;
  VatRegNo?: string;
  Email?: string;
  PhoneNo?: string;
  Address?: string;
}

export interface DocType {
  DocTypeID: number;
  Description: string;
}

export interface Tax {
  TaxID: number;
  TaxCode: string;
  TaxName: string;
  TaxRate: number;
  IsActive?: boolean;
}

// Request/Response types
export interface PaymentVoucherRequest {
  voucher: Partial<PaymentVoucher>;
  lines: Partial<PaymentVoucherLine>[];
  attachments?: Partial<PaymentVoucherAttachment>[];
}

export interface PaymentVoucherResponse {
  voucher: PaymentVoucher | null;
  lines: PaymentVoucherLine[];
  attachments: PaymentVoucherAttachment[];
}

export interface PaymentSearchFilters {
  searchText?: string;
  dateFrom?: Date;
  dateTo?: Date;
  companyId?: number;
  fiscalYearId?: number;
  status?: PaymentStatus;
  approvalStatus?: ApprovalStatus;
  supplierId?: number;
  paymentType?: PaymentType;
  accountId?: number;
}

export interface PaymentSummaryReport {
  AccountID: number;
  AccountCode: string;
  AccountName: string;
  TotalDebits: number;
  TotalCredits: number;
  NetAmount: number;
  VoucherCount: number;
}

export interface SupplierBalance {
  SupplierID: number;
  SupplierNo?: string;
  SupplierName?: string;
  OutstandingBalance: number;
  BalanceDate: Date;
}

export interface SupplierPaymentHistory {
  VoucherNo: string;
  TransactionDate: Date;
  PostingDate: Date;
  PaymentStatus: PaymentStatus;
  ApprovalStatus: ApprovalStatus;
  ChequeNo?: string;
  ChequeDate?: Date;
  Narration?: string;
  TotalAmount: number;
  SupplierName: string;
  CreatedBy: string;
  CreatedOn: Date;
}

export interface PaymentStatistics {
  TotalVouchers: number;
  DraftVouchers: number;
  PendingVouchers: number;
  PaidVouchers: number;
  RejectedVouchers: number;
  TotalAmount: number;
  MonthlyTrend: {
    Month: string;
    Amount: number;
    Count: number;
  }[];
  SupplierDistribution: {
    SupplierName: string;
    Amount: number;
    Percentage: number;
  }[];
  PaymentTypeDistribution: {
    PaymentType: string;
    Amount: number;
    Count: number;
  }[];
}

// API Response interfaces
export interface ApiResponse<T = any> {
  Status: number;
  Message: string;
  [key: string]: any;
  data?: T;
}

export interface CreatePaymentVoucherResponse {
  success: boolean;
  message: string;
  voucherNo?: string;
  postingId?: number;
}

export interface ApprovalResponse {
  success: boolean;
  message: string;
}

export interface ReversalResponse {
  success: boolean;
  message: string;
  reversalVoucherNo?: string;
}

export interface AttachmentResponse {
  success: boolean;
  message: string;
  attachmentId?: number;
}

export interface NextVoucherNumberResponse {
  success: boolean;
  message: string;
  nextVoucherNo?: string;
}

export interface VoucherExistsResponse {
  exists: boolean;
  message: string;
}

export interface AccountBalanceResponse {
  success: boolean;
  message: string;
  accountBalance?: number;
}

export interface SupplierBalanceResponse {
  success: boolean;
  message: string;
  supplierBalance?: number;
  supplierId?: number;
}

// Form validation schemas
export interface PaymentVoucherFormData {
  // Header information
  voucherNo?: string;
  transactionDate: Date;
  postingDate?: Date;
  companyId: number;
  fiscalYearId: number;
  currencyId: number;
  exchangeRate?: number;
  description?: string;
  narration?: string;

  // Payment specific
  paymentType: PaymentType;
  paymentAccountId: number;
  supplierId?: number;
  paidTo?: string;
  refNo?: string;
  chequeNo?: string;
  chequeDate?: Date;
  bankId?: number;
  totalAmount: number;

  // Cost centers
  costCenter1Id?: number;
  costCenter2Id?: number;
  costCenter3Id?: number;
  costCenter4Id?: number;
  copyCostCenters?: boolean;

  // Tax information
  taxId?: number;
  isTaxInclusive?: boolean;

  // Reference
  referenceType?: string;
  referenceId?: number;
  referenceNo?: string;

  // Voucher lines (debit entries)
  lines: {
    accountId: number;
    debitAmount: number;
    creditAmount?: number;
    baseAmount?: number;
    description?: string;
    customerId?: number;
    lineSupplierID?: number;
    taxPercentage?: number;
    lineTaxAmount?: number;
    lineCostCenter1Id?: number;
    lineCostCenter2Id?: number;
    lineCostCenter3Id?: number;
    lineCostCenter4Id?: number;
  }[];

  // Attachments
  attachments?: {
    docTypeId: number;
    documentName: string;
    file?: File;
    documentDescription?: string;
    isRequired?: boolean;
    displayOrder?: number;
  }[];
}

// Error types
export interface PaymentVoucherError {
  field?: string;
  message: string;
  code?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: PaymentVoucherError[];
}

// Utility types
export type PaymentVoucherLineInput = Omit<PaymentVoucherLine, "PostingID" | "VoucherNo" | keyof BasePaymentVoucher>;
export type PaymentAttachmentInput = Omit<PaymentVoucherAttachment, "PostingAttachmentID" | "PostingID" | "UploadedDate" | "UploadedByUserID" | keyof BasePaymentVoucher>;
export type PaymentVoucherInput = Omit<PaymentVoucher, "PostingID" | keyof BasePaymentVoucher>;

// Default export types for common usage
export type PaymentVoucherCreate = PaymentVoucherRequest;
export type PaymentVoucherUpdate = PaymentVoucherRequest & { voucherNo: string };
export type PaymentVoucherDetail = PaymentVoucherResponse;

// Payment method specific interfaces
export interface ChequePaymentDetails {
  chequeNo: string;
  chequeDate: Date;
  bankId: number;
  payeeInfo?: string;
}

export interface BankTransferDetails {
  fromAccountId: number;
  toAccountId: number;
  transferReference?: string;
  swiftCode?: string;
  routingNumber?: string;
}

export interface OnlinePaymentDetails {
  transactionId?: string;
  paymentGateway?: string;
  authorizationCode?: string;
  processingFee?: number;
}

// Report specific types
export interface PaymentAnalytics {
  periodComparison: {
    currentPeriod: {
      amount: number;
      count: number;
      startDate: Date;
      endDate: Date;
    };
    previousPeriod: {
      amount: number;
      count: number;
      startDate: Date;
      endDate: Date;
    };
    growthRate: number;
  };
  topSuppliers: {
    supplierId: number;
    supplierName: string;
    totalPaid: number;
    voucherCount: number;
    lastPaymentDate: Date;
  }[];
  paymentTrends: {
    date: Date;
    amount: number;
    count: number;
  }[];
  averagePaymentSize: number;
  largestPayment: {
    voucherNo: string;
    amount: number;
    supplierName: string;
    date: Date;
  };
}

// Workflow and approval types
export interface PaymentApprovalWorkflow {
  currentStage: string;
  nextStage?: string;
  approvalLevels: {
    level: number;
    approverRole: string;
    approverUserId?: number;
    approvedDate?: Date;
    comments?: string;
    status: "Pending" | "Approved" | "Rejected";
  }[];
  canApprove: boolean;
  canReject: boolean;
  requiresApproval: boolean;
}

// Import/Export types
export interface PaymentVoucherImportTemplate {
  transactionDate: string;
  paymentType: string;
  paymentAccount: string;
  supplierCode?: string;
  supplierName?: string;
  description: string;
  totalAmount: number;
  chequeNo?: string;
  chequeDate?: string;
  accountCode: string;
  accountAmount: number;
  accountDescription?: string;
}

export interface PaymentVoucherExportData extends PaymentVoucher {
  lines: PaymentVoucherLine[];
  totalLineAmount: number;
  attachmentCount: number;
}

// Audit trail types
export interface PaymentAuditLog {
  auditId: number;
  voucherNo: string;
  action: "Created" | "Updated" | "Approved" | "Rejected" | "Paid" | "Reversed" | "Deleted";
  userId: number;
  userName: string;
  timestamp: Date;
  oldValues?: Record<string, any>;
  newValues?: Record<string, any>;
  comments?: string;
  ipAddress?: string;
}

// Integration types for external systems
export interface BankIntegrationPayment {
  voucherNo: string;
  bankTransactionId: string;
  bankReference: string;
  processingDate: Date;
  clearedDate?: Date;
  bankFees?: number;
  exchangeRateUsed?: number;
  status: "Pending" | "Cleared" | "Failed" | "Returned";
}

export interface ERPIntegrationMapping {
  erpVoucherNo: string;
  externalSystemId: string;
  externalReference: string;
  syncStatus: "Pending" | "Synced" | "Failed";
  lastSyncDate: Date;
  errorMessage?: string;
}
